module Part3(LEDR, SW);
    input [9:0] SW;
	 output [9:0] LEDR;
	 wire WIRE0;
	 wire WIRE1;
	 wire WIRE2;
	 wire WIRE3;
	 wire WIRE4;
	 wire WIRE5;
	 wire WIRE6;
	 
	 Adder a1 (
	     .LEDR(WIRE0),
		  .SW(SW)
	 );
	 
	 reg Out;
	 always @(*)
	     begin
		      case()
endmodule

module Mux(LEDR, SW);
    input[9:0] SW;
    output[9:0]LEDR;

    reg Out;

        always@(*)
            begin
                case (SW[9:7])
                      3'b000: Out = SW[0]; // could be 3'd0
                                3'b001: Out = SW[1];
                                3'b010: Out = SW[2];
                                3'b011: Out = SW[3];
                                3'b100: Out = SW[4];
                                3'b101: Out = SW[5];
                                3'b110: Out = SW[6];
                                default: Out = 1'b0;

                endcase
         end
         assign LEDR[0] = Out;
endmodule


// change to specify values
module Adder(LEDR, SW);
    input [9:0] SW; // 1-4 FIRST DIGIT, 5-8 SECOND DIGIT,0 FIRST CARRY
    output [9:0] LEDR;
    wire WIRE0;
         wire WIRE1;
         wire WIRE2;

         fullAdder bo(
             .A(SW[1]),
                  .B(SW[5]),
                  .cin(SW[0]),
                  .S(LEDR[0]),
                  .cout(WIRE0)
         );

         fullAdder b1(
             .A(SW[2]),
                  .B(SW[6]),
                  .cin(WIRE0),
                  .S(LEDR[1]),
                  .cout(WIRE1)
         );

         fullAdder b2(
             .A(SW[3]),
                  .B(SW[7]),
                  .cin(WIRE1),
                  .S(LEDR[2]),
                  .cout(WIRE2)
         );

         fullAdder b3(
             .A(SW[4]),
                  .B(SW[8]),
                  .cin(WIRE2),
                  .S(LEDR[3]),
                  .cout(LEDR[4])
         );


endmodule

module fullAdder(A, B, cin, S, cout);
    input A; // bits to add
    input B;
    input cin; // carry value
         output cout; // carry out
    output S; //output value

    assign S = A ^ B^ C;
         assign cout = (A&B) | (A&C) | (B&C);

endmodule
